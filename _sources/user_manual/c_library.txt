
C Libraries
===========

math.h
------


The isfinite macro
******************

Synopsis:

.. code-block:: c

        #include <math.h>
        int isfinite(real-floating x);

Description:

    The isfinite macro determines whether its argument has a finite value (zero,
    subnormal, or normal, and not infinite or NaN). First, an argument represented in a
    format wider than its semantic type is converted to its semantic type. Then determination
    is based on the type of the argument.
    Since an expression can be evaluated with more range and precision than its type has, it is important to
    know the type that classification is based on. For example, a normal long double value might
    become subnormal when converted to double, and zero when converted to float.

Returns:

The isfinite macro returns a nonzero value if and only if its argument has a finite
value.

The isinf macro
***************

Synopsis:

.. code-block:: c

    #include <math.h>
    int isinf(real-floating x);

Description:

    The isinf macro determines whether its argument value is an infinity (positive or
    negative). First, an argument represented in a format wider than its semantic type is
    converted to its semantic type. Then determination is based on the type of the argument.

Returns:

    The isinf macro returns a nonzero value if and only if its argument has an infinite
    value.


The isnan macro
***************

Synopsis:

.. code-block:: c

        #include <math.h>
        int isnan(real-floating x);

Description:

    The isnan macro determines whether its argument value is a NaN. First, an argument
    represented in a format wider than its semantic type is converted to its semantic type.
    Then determination is based on the type of the argument.

Returns:

    The isnan macro returns a nonzero value if and only if its argument has a NaN value.


The isnormal macro
******************

Synopsis:

.. code-block:: c

        #include <math.h>
        int isnormal(real-floating x);

    For the isnan macro, the type for determination does not matter unless the implementation supports
    NaNs in the evaluation type but not in the semantic type.

Description:

    The isnormal macro determines whether its argument value is normal (neither
    zero, subnormal, infinite, nor NaN). First, an argument
    represented in a format wider than its semantic type is converted to its
    semantic type. Then determination is based on the type of the argument.

Returns:

    The isnormal macro returns a nonzero value if and only if its argument has a
    normal value.


The signbit macro (not in C89)
******************************

Synopsis:

.. code-block:: c

    #include <math.h>
    int signbit(real-floating x);

Description:

    The signbit macro determines whether the sign of its argument value is negative.

Returns:

    The signbit macro returns a nonzero value if and only if the sign of its argument value
    is negative.

The fabs function
*****************

Synopsis:

.. code-block:: c

         #include <math.h>
         double fabs(double x);

Description:

   The fabs function computes the absolute value of a floating-point
   number x.

Returns:

   The fabs function returns the absolute value of x.


The modf function
*****************

Synopsis:

.. code-block:: c

         #include <math.h>
         double modf(double value, double *iptr);

Description:

   The modf function breaks the argument value into integral and
   fractional parts, each of which has the same sign as the argument.  It
   stores the integral part as a double in the object pointed to by iptr.

Returns:

   The modf function returns the signed fractional part of value.


The fmod function
*****************

Synopsis:

.. code-block:: c

         #include <math.h>
         double fmod(double x, double y);

Description:

   The fmod function computes the floating-point remainder of x/y.

Returns:

   The fmod function returns the value x i y , for some integer i such
   that, if y is nonzero, the result has the same sign as x and magnitude
   less than the magnitude of y.  If y is zero, whether a domain error
   occurs or the fmod function returns zero is implementation-defined.


The exp function
****************

Synopsis:

.. code-block:: c

         #include <math.h>
         double exp(double x);

Description:

   The exp function computes the exponential function of x.  A range
   error occurs if the magnitude of x is too large.

Returns:

   The exp function returns the exponential value.


The sqrt function
*****************

Synopsis:

.. code-block:: c

         #include <math.h>
         double sqrt(double x);

Description:

   The sqrt function computes the nonnegative square root of x.  A
   domain error occurs if the argument is negative.

Returns:

   The sqrt function returns the value of the square root.


The pow function
****************

Synopsis:

.. code-block:: c

         #include <math.h>
         double pow(double x, double y);

Description:

   The pow function computes x raised to the power y.  A domain error
   occurs if x is negative and y is not an integer.  A domain error
   occurs if the result cannot be represented when x is zero and y is
   less than or equal to zero.  A range error may occur.

Returns:

   The pow function returns the value of x raised to the power y.


The ldexp function
******************

Synopsis:

.. code-block:: c

         #include <math.h>
         double ldexp(double x, int exp);

Description:

   The ldexp function multiplies a floating-point number by an
   integral power of 2.  A range error may occur.

Returns:

   The ldexp function returns the value of x times 2 raised to the
   power exp.


The frexp function
******************

Synopsis:

.. code-block:: c

         #include <math.h>
         double frexp(double value, int *exp);

Description:

   The frexp function breaks a floating-point number into a normalized
   fraction and an integral power of 2.  It stores the integer in the int
   object pointed to by exp.

Returns:

   The frexp function returns the value x , such that x is a double
   with magnitude in the interval [1/2, 1) or zero, and value equals x
   times 2 raised to the power *exp.  If value is zero, both parts of
   the result are zero.


The floor function
******************

Synopsis:

.. code-block:: c

         #include <math.h>
         double floor(double x);

Description:

   The floor function computes the largest integral value not greater
than x.

Returns:

   The floor function returns the largest integral value not greater
   than x , expressed as a double.


The ceil function
*****************

Synopsis:

.. code-block:: c

         #include <math.h>
         double ceil(double x);

Description:

   The ceil function computes the smallest integral value not less than x.

Returns:

   The ceil function returns the smallest integral value not less than
   x , expressed as a double.


The cos function
****************

Synopsis:

.. code-block:: c

         #include <math.h>
         double cos(double x);

Description:

   The cos function computes the cosine of x (measured in radians).  A
   large magnitude argument may yield a result with little or no
   significance.

Returns:

   The cos function returns the cosine value.


The sin function
****************

Synopsis:

.. code-block:: c

         #include <math.h>
         double sin(double x);

Description:

   The sin function computes the sine of x (measured in radians).  A
   large magnitude argument may yield a result with little or no
   significance.

Returns:

   The sin function returns the sine value.


The tan function
****************

Synopsis:

.. code-block:: c

         #include <math.h>
         double tan(double x);

Description:

   The tan function returns the tangent of x (measured in radians).  A large magnitude argument may yield a result with little or no significance.

Returns:

   The tan function returns the tangent value.


The atan function
*****************

Synopsis:

.. code-block:: c

         #include <math.h>
         double atan(double x);

Description:

   The atan function computes the principal value of the arc tangent of x.

Returns:

   The atan function returns the arc tangent in the range [-PI/2, +PI/2]
   radians.


The atan2 function
******************

Synopsis:

.. code-block:: c

         #include <math.h>
         double atan2(double y, double x);

Description:

   The atan2 function computes the principal value of the arc tangent
   of y/x , using the signs of both arguments to determine the quadrant
   of the return value.  A domain error may occur if both arguments are
   zero.

Returns:

   The atan2 function returns the arc tangent of y/x , in the range
   [-PI, +PI] radians.


The asin function
*****************

Synopsis:

.. code-block:: c

         #include <math.h>
         double asin(double x);

Description:

   The asin function computes the principal value of the arc sine of x.
   A domain error occurs for arguments not in the range [-1, +1].

Returns:

   The asin function returns the arc sine in the range [-PI/2, +PI/2]
   radians.


The acos function
*****************

Synopsis:

.. code-block:: c

  #include <math.h>
  double acos(double x);

Description:

  The acos function computes the principal value of the arc cosine of x.
  A domain error occurs for arguments not in the range [-1, +1].

Returns:

  The acos function returns the arc cosine in the range [0, PI] radians.


The sinh function
*****************

Synopsis:

.. code-block:: c

         #include <math.h>
         double sinh(double x);

Description:

   The sinh function computes the hyperbolic sine of x.  A range error occurs if the magnitude of x is too large.

Returns:

   The sinh function returns the hyperbolic sine value.


The cosh function
*****************

Synopsis:

.. code-block:: c

         #include <math.h>
         double cosh(double x);

Description:

   The cosh function computes the hyperbolic cosine of x.  A range
   error occurs if the magnitude of x is too large.

Returns:

   The cosh function returns the hyperbolic cosine value.


The tanh function
*****************

Synopsis:

.. code-block:: c

         #include <math.h>
         double tanh(double x);

Description:

   The tanh function computes the hyperbolic tangent of x.

Returns:

   The tanh function returns the hyperbolic tangent value.


The log function
****************

Synopsis:

.. code-block:: c

         #include <math.h>
         double log(double x);

Description:

   The log function computes the natural logarithm of x.  A domain
   error occurs if the argument is negative.  A range error occurs if the
   argument is zero and the logarithm of zero cannot be represented.

Returns:

   The log function returns the natural logarithm.


The log10 function
******************

Synopsis:

.. code-block:: c

         #include <math.h>
         double log10(double x);

Description:

   The log10 function computes the base-ten logarithm of x.  A domain
   error occurs if the argument is negative.  A range error occurs if the
   argument is zero and the logarithm of zero cannot be represented.

Returns:

   The log10 function returns the base-ten logarithm.


The log2 function (Not in C89 standard)
***************************************

Synopsis:

.. code-block:: c

         #include <math.h>
         double log2(double x);

Description:

   The log2 function computes the base-two logarithm of x.  A domain
   error occurs if the argument is negative.  A range error occurs if the
   argument is zero and the logarithm of zero cannot be represented.

Returns:

   The log2 function returns the base-two logarithm.


stdio.h
-------

In contrast to the C standard, `fputc` and `fgetc` are built-in functions, you
do not need to include `stdio.h` to use them.

The globals `stdin` and `stdout` should be set to an input or output by the user.

The `fputs` function prints `string` to the output `handle`.

.. code-block:: c

        void fputs(unsigned string[], unsigned handle);

The `fgets` function reads a line, up to `maxlength` characters, or a line end
from the input `handle`. The string will be null terminated. `maxlength`
includes the null character.

.. code-block:: c

        void fgets(unsigned string[], unsigned maxlength, unsigned handle);

The `puts` function prints `string` to stdout.

.. code-block:: c

        void puts(unsigned string[]);

The `gets` function reads a line, up to `maxlength` characters, or a line end
from stdin. The string will be null terminated. `maxlength`
includes the null character.

.. code-block:: c

        void gets(unsigned string[], unsigned maxlength);

The `getc` returns a single character from stdin.

.. code-block:: c

        unsigned long getc();

The `putc` writes a single character to stdout.

.. code-block:: c

        void putc(unsigned c);

